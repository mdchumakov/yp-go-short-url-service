// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	model "yp-go-short-url-service/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockURLRepository) Create(ctx context.Context, url *model.URLsModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockURLRepositoryMockRecorder) Create(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockURLRepository)(nil).Create), ctx, url)
}

// GetAll mocks base method.
func (m *MockURLRepository) GetAll(ctx context.Context, limit, offset int) ([]*model.URLsModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.URLsModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockURLRepositoryMockRecorder) GetAll(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockURLRepository)(nil).GetAll), ctx, limit, offset)
}

// GetByLongURL mocks base method.
func (m *MockURLRepository) GetByLongURL(ctx context.Context, longURL string) (*model.URLsModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLongURL", ctx, longURL)
	ret0, _ := ret[0].(*model.URLsModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLongURL indicates an expected call of GetByLongURL.
func (mr *MockURLRepositoryMockRecorder) GetByLongURL(ctx, longURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLongURL", reflect.TypeOf((*MockURLRepository)(nil).GetByLongURL), ctx, longURL)
}

// GetByShortURL mocks base method.
func (m *MockURLRepository) GetByShortURL(ctx context.Context, shortURL string) (*model.URLsModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", ctx, shortURL)
	ret0, _ := ret[0].(*model.URLsModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockURLRepositoryMockRecorder) GetByShortURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockURLRepository)(nil).GetByShortURL), ctx, shortURL)
}

// GetTotalCount mocks base method.
func (m *MockURLRepository) GetTotalCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCount indicates an expected call of GetTotalCount.
func (mr *MockURLRepositoryMockRecorder) GetTotalCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCount", reflect.TypeOf((*MockURLRepository)(nil).GetTotalCount), ctx)
}

// Ping mocks base method.
func (m *MockURLRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLRepositoryMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLRepository)(nil).Ping), ctx)
}

// MockURLRepositoryReader is a mock of URLRepositoryReader interface.
type MockURLRepositoryReader struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryReaderMockRecorder
}

// MockURLRepositoryReaderMockRecorder is the mock recorder for MockURLRepositoryReader.
type MockURLRepositoryReaderMockRecorder struct {
	mock *MockURLRepositoryReader
}

// NewMockURLRepositoryReader creates a new mock instance.
func NewMockURLRepositoryReader(ctrl *gomock.Controller) *MockURLRepositoryReader {
	mock := &MockURLRepositoryReader{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepositoryReader) EXPECT() *MockURLRepositoryReaderMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockURLRepositoryReader) GetAll(ctx context.Context, limit, offset int) ([]*model.URLsModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.URLsModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockURLRepositoryReaderMockRecorder) GetAll(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockURLRepositoryReader)(nil).GetAll), ctx, limit, offset)
}

// GetByLongURL mocks base method.
func (m *MockURLRepositoryReader) GetByLongURL(ctx context.Context, longURL string) (*model.URLsModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLongURL", ctx, longURL)
	ret0, _ := ret[0].(*model.URLsModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLongURL indicates an expected call of GetByLongURL.
func (mr *MockURLRepositoryReaderMockRecorder) GetByLongURL(ctx, longURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLongURL", reflect.TypeOf((*MockURLRepositoryReader)(nil).GetByLongURL), ctx, longURL)
}

// GetByShortURL mocks base method.
func (m *MockURLRepositoryReader) GetByShortURL(ctx context.Context, shortURL string) (*model.URLsModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", ctx, shortURL)
	ret0, _ := ret[0].(*model.URLsModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockURLRepositoryReaderMockRecorder) GetByShortURL(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockURLRepositoryReader)(nil).GetByShortURL), ctx, shortURL)
}

// GetTotalCount mocks base method.
func (m *MockURLRepositoryReader) GetTotalCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCount indicates an expected call of GetTotalCount.
func (mr *MockURLRepositoryReaderMockRecorder) GetTotalCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCount", reflect.TypeOf((*MockURLRepositoryReader)(nil).GetTotalCount), ctx)
}

// Ping mocks base method.
func (m *MockURLRepositoryReader) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLRepositoryReaderMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLRepositoryReader)(nil).Ping), ctx)
}

// MockURLRepositoryWriter is a mock of URLRepositoryWriter interface.
type MockURLRepositoryWriter struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryWriterMockRecorder
}

// MockURLRepositoryWriterMockRecorder is the mock recorder for MockURLRepositoryWriter.
type MockURLRepositoryWriterMockRecorder struct {
	mock *MockURLRepositoryWriter
}

// NewMockURLRepositoryWriter creates a new mock instance.
func NewMockURLRepositoryWriter(ctrl *gomock.Controller) *MockURLRepositoryWriter {
	mock := &MockURLRepositoryWriter{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepositoryWriter) EXPECT() *MockURLRepositoryWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockURLRepositoryWriter) Create(ctx context.Context, url *model.URLsModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockURLRepositoryWriterMockRecorder) Create(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockURLRepositoryWriter)(nil).Create), ctx, url)
}
